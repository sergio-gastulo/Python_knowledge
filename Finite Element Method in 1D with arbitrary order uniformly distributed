# -*- coding: utf-8 -*-
"""MEF Local - Orden arbitrario

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BX9WZVoflIFhYetfTdsjvClI9MU61Wet
Buscamos resolver el problema $$-u'' = f, u(0) = A, u(1) = B$$

Considerando $f = \sin, A = 0, B = \sin 1$, la soluci√≥n exacta es $u(x) = \sin x$
"""

import numpy as np
from scipy.special import roots_legendre
from functools import partial
import matplotlib.pyplot as plt


f = lambda x: np.sin(x)
A = 0
B = np.sin(1)
xx = np.array([0,.4,.9,.6,.1,.5,.8,.2,.7,.3,1])
# h = np.diff(xx)
h = 0.1
n = len(xx)-1

def gauss1d(fun, x0, x1):
    n = 5
    xi, wi = roots_legendre(n)
    inte = 0
    h = 0.5 * (x1 - x0)
    xm = 0.5 * (x0 + x1)
    for cont in range(n):
        inte += h * fun(h * xi[cont] + xm) * wi[cont]
    return inte

Aelemental = np.zeros((2,2),float)
Aelemental[0][1] = - 1/h
Aelemental[1][0] = - 1/h
Aelemental[0][0] = 1/h
Aelemental[1][1] = 1/h

phi0_e = lambda x,i: 1-x/h
phi1_e = lambda x,i: x/h
ftimesphi0_e = lambda x,i: f(x+xx[i])*phi0_e(x,i)
ftimesphi1_e = lambda x,i: f(x+xx[i])*phi1_e(x,i)

Belemental = np.zeros((n,2), float)
for i in range(n):
  aux0 = partial(ftimesphi0_e, i = i)
  aux1 = partial(ftimesphi1_e, i = i)
  Belemental[i][0] = gauss1d(aux0, 0, h)
  Belemental[i][1] = gauss1d(aux1, 0, h)

conectividad = [6,2,0,4,3,8,7,9,4,7,8,6,1,5,2,10,5,3,9,1]
conectividad = np.reshape(conectividad,(n,2))

Bmatrix = np.zeros(n+1,float)
Amatrix = np.zeros((n+1,n+1),float)

for i in range(n):
  for k in range(2):
    for l in range(2):
      Amatrix[conectividad[i][k]][conectividad[i][l]] += Aelemental[k][l]

for i in range(n):
  for k in range(2):
    Bmatrix[conectividad[i][k]] += Belemental[i][k]

'''
    Condiciones iniciales:
    x_0 = frontera, valor = u(0) = A
    x_10 = frontera, valor = u(1) = B
'''
alfa = np.zeros(n+1,float)
alfa[0] = A
alfa[-1] = B
alfa[1:-1] = np.linalg.solve(
    Amatrix[1:-1,1:-1],
    Bmatrix[1:-1] - alfa[0] * Amatrix[1:-1,0] - alfa[-1] * Amatrix[1:-1,-1])
tt = np.linspace(0,1,20)
plt.scatter(xx,alfa, s = 5, c = 'red', label = 'unsorted discretization')
plt.plot(tt,np.sin(tt), c = 'blue', label = 'solution')
plt.title("solution: $f(x) = \sin x$")
plt.legend()
print("connectivity matrix: ")
print(conectividad)
