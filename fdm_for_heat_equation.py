# -*- coding: utf-8 -*-
"""FDM for Heat Equation

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10Z4uW7oHYX5AZ-bKjiEvfZyQ5dWugh6B

Buscamos resolver numéricamente la ecuación
\begin{align*}
  u_t  &= \alpha^2 u_{xx} \\
u(x,0) &= g(x)\\
u(0,t) &= A \\
u(L,t) &= B \\
(t,x) &\in \mathbb{R}^{+} \times [0,L]
\end{align*}

El esquema iterativo es el siguiente
$$ U_i^{j+1} = \lambda U_{i-1}^j + (1-2\lambda) U_i^j + \lambda U_{i+1}^j, $$
Donde $i,j = 1, ..., n-1$ y $\lambda = \dfrac{\alpha^2 k}{h^2}$
"""

import numpy as np
import matplotlib.pyplot as plt
from numpy import pi as pi
from numpy import exp as exp
from numpy import cos as cos
from numpy import sin as sin

solution = lambda x,t: sin(pi * x) * exp(-pi**2 * t)

"""La función previamente descrita es $$ u(x,t) = \sin (\pi x) e^{-\pi^2 t}$$

Es solución de la EDP
\begin{align*}
u_t &= u_{xx}, \quad x \in (0,1) , t>0 \\
u(x,0) &= \sin (\pi x)\\
u (0,t) &= 0\\
u (1,t) &= 0
\end{align*}
"""

'''
    Some relations:
    x <> h <> i <> n <> L
    t <> k <> j <> m <> T
'''

g = lambda x: sin(pi *x)
alfa = 1
L,T = 1, 1 # T = límite de la discretización del tiempo
A, B = 0, 0
n,m = 10,500
xx = np.linspace(0,L,n+1)
tt = np.linspace(0,T,m+1)
h, k = L/n, T/m
l = (alfa**2 * k) / (h**2) # l debe ser menor a 0.5
# print(l,h,k)

U = np.zeros((n+1,m+1),float)
U[0,:] = np.array([A for j in range(m+1)])
U[-1,:] = np.array([B for j in range(m+1)])
U[:,0] = g(xx)

Ashadow = np.zeros((n+1,n+1),float)
np.fill_diagonal(Ashadow[1:], np.full(n,l))
np.fill_diagonal(Ashadow, np.full(n+1, 1-2*l))
np.fill_diagonal(Ashadow[:, 1:], np.full(n,l))

for j in range(1,m+1):
  U[1:-1,j] = np.dot(Ashadow,U[:,j-1])[1:-1]

count = int(m/2) #<= m
if count <= m:
  plt.plot(xx,solution(xx,tt[count]), c = 'blue', label = 'solucion en t =' + str(tt[count]))
  plt.scatter(xx,U[:,count], s = 5, c = 'red', label= 'discretizacion en t=' + str(tt[count]))
  plt.title("Solución exacta $u(x,t) = \sin (\pi x) e^{-\pi^2 t}$")
  plt.legend()
else:
  print("error")